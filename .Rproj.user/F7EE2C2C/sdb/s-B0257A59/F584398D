{
    "contents" : ">### Introduction\n>\n>This second programming assignment will require you to write an R\n>function that is able to cache potentially time-consuming computations.\n>For example, taking the mean of a numeric vector is typically a fast\n>operation. However, for a very long vector, it may take too long to\n>compute the mean, especially if it has to be computed repeatedly (e.g.\n>in a loop). If the contents of a vector are not changing, it may make\n>sense to cache the value of the mean so that when we need it again, it\n>can be looked up in the cache rather than recomputed. In this\n>Programming Assignment you will take advantage of the scoping rules of\n>the R language and how they can be manipulated to preserve state inside\n>of an R object.\n>\n>### Example: Caching the Mean of a Vector\n>\n>In this example we introduce the `<<-` operator which can be used to\n>assign a value to an object in an environment that is different from the\n>current environment. Below are two functions that are used to create a\n>special object that stores a numeric vector and caches its mean.\n>\n>The first function, `makeVector` creates a special \"vector\", which is\n>really a list containing a function to\n>\n>1.  set the value of the vector\n>2.  get the value of the vector\n>3.  set the value of the mean\n>4.  get the value of the mean\n>\n> <!-- -->\n>\n>    makeVector <- function(x = numeric()) {\n>            m <- NULL\n>            set <- function(y) {\n>                    x <<- y\n>                    m <<- NULL\n>            }\n>            get <- function() x\n>            setmean <- function(mean) m <<- mean\n>            getmean <- function() m\n>            list(set = set, get = get,\n>                 setmean = setmean,\n>                 getmean = getmean)\n>    }\n>\n>The following function calculates the mean of the special \"vector\"\n>created with the above function. However, it first checks to see if the\n>mean has already been calculated. If so, it `get`s the mean from the\n>cache and skips the computation. Otherwise, it calculates the mean of\n>the data and sets the value of the mean in the cache via the `setmean`\n>function.\n>\n>    cachemean <- function(x, ...) {\n>            m <- x$getmean()\n>            if(!is.null(m)) {\n>                    message(\"getting cached data\")\n>                    return(m)\n>            }\n>            data <- x$get()\n>            m <- mean(data, ...)\n>            x$setmean(m)\n>            m\n>    }\n>\n>### Assignment: Caching the Inverse of a Matrix\n>\n>Matrix inversion is usually a costly computation and there may be some\n>benefit to caching the inverse of a matrix rather than computing it\n>repeatedly (there are also alternatives to matrix inversion that we will\n>not discuss here). Your assignment is to write a pair of functions that\n>cache the inverse of a matrix.\n>\n>Write the following functions:\n>\n>1.  `makeCacheMatrix`: This function creates a special \"matrix\" object\n>    that can cache its inverse.\n>2.  `cacheSolve`: This function computes the inverse of the special\n>    \"matrix\" returned by `makeCacheMatrix` above. If the inverse has\n>    already been calculated (and the matrix has not changed), then\n>    `cacheSolve` should retrieve the inverse from the cache.\n>\n>Computing the inverse of a square matrix can be done with the `solve`\n>function in R. For example, if `X` is a square invertible matrix, then\n>`solve(X)` returns its inverse.\n>\n>For this assignment, assume that the matrix supplied is always\n>invertible.\n>\n>In order to complete this assignment, you must do the following:\n>\n>1.  Fork the GitHub repository containing the stub R files at\n>    [https://github.com/rdpeng/ProgrammingAssignment2](https://github.com/rdpeng/ProgrammingAssignment2)\n>    to create a copy under your own account.\n>2.  Clone your forked GitHub repository to your computer so that you can\n>    edit the files locally on your own machine.\n>3.  Edit the R file contained in the git repository and place your\n>    solution in that file (please do not rename the file).\n>4.  Commit your completed R file into YOUR git repository and push your\n>    git branch to the GitHub repository under your account.\n>5.  Submit to Coursera the URL to your GitHub repository that contains\n>    the completed R code for the assignment.\n>\n>### Grading\n>\n>This assignment will be graded via peer assessment.\n>\n\n## My Contributing to this assignment\n\n### The following is the main steps to produce my assignement\n\n1. Fork the GitHub repository containing the stub R files at\n   https://github.com/rdpeng/ProgrammingAssignment2 to create a copy under my own account.\n  \n   I performed the following steps:\n   * type \"rdpeng/ProgrammingAssignment2\" in the box \"search or type a command\" on the \n     command bar located at the top of the page.\n   \n   * click \"return\" button on the keyboard of my PC\n     (Google-Chrome will open a new webpage https://github.com/rdpeng/ProgrammingAssignment2)\n     \n   * click the \"Fork\" button in the GitHub.com rdpeng/ProgrammingAssignment2 repository\n  \n---------------------------------------------------------------------------------------------\n2. Clone your forked GitHub repository to my PC so that I can edit the files locally.\n\n  I made a local copy of the repo on my PC via the following command   \n     $git clone https://github.com/sjchan-ds/ProgrammingAssignment2.git\n     \n----------------------------------------------------------------------------------------------\n3. Edit the R file contained in the git repository and place my solution in  \"cachematrix.R\"\n\n * Open Rstudio -- change working directory to the local repo ProgrammingAssignment directory\n \n * Open R script file: cachematrix.R\n \n * Edit/modify cachematrix.R  whenever I think it is necessary\n \n * (optional) edit/modify readme.md to fill in the procedures how I put my version of \n   cachematrix.R back to my GitHub repo\n \n---------------------------------------------------------------------------------------------\n4. Commit your completed R file into my git repository and push your git branch to \nthe GitHub repository under your account.\n\n * Use \"git add\": take a snapshot for add/update files that are stored in a temporary stage \n   called \"index\"\n     $git add -A . \n     \n * Use \"git commit\": permanently store in the content of the index in the local repo \n     $git commit -m \"my xxth verison\"   ##permanently store in the content of the index in the repo\n   \n * Push the permanently stored files in the repo to the GitHub repo (remote repo: sjchan-ds/Spoon-Knife)\n     $git push origin master\n     \n-------------------------------------------------------------------------------------------\n5. Submit to Coursera the URL to my GitHub repository that contains the completed R code \n   the assignment.\n                   \n\n  The  link is:\n  https://github.com/sjchan-ds/ProgrammingAssignment2/blob/master/cachematrix.R\n  \n\n\n\n",
    "created" : 1398433568691.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1746086465",
    "id" : "F584398D",
    "lastKnownWriteTime" : 1398437456,
    "path" : "C:/Users/SJ/ProgrammingAssignment2/README.md",
    "project_path" : "README.md",
    "properties" : {
        "ignored_words" : "readme,md,cachematrix,GitHub,repo,sjchan,ds,Coursera,https,github,ProgrammingAssignment,rdpeng,Rstudio\n"
    },
    "source_on_save" : false,
    "type" : "markdown"
}